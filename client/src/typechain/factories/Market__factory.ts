/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
  Signer,
  utils,
} from "ethers";
import type { Market, MarketInterface } from "../Market";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cut",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "address",
        name: "stable",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Buy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Delist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "SellListing",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "areStable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "delist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "listings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "royalty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isStable",
        type: "bool",
      },
    ],
    name: "sellListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d1c380380610d1c83398101604081905261002f91610081565b600080546001600160a01b03199081166001600160a01b03948516179091556001939093556002805490931691161790556100bc565b80516001600160a01b038116811461007c57600080fd5b919050565b600080600060608486031215610095578283fd5b835192506100a560208501610065565b91506100b360408501610065565b90509250925092565b610c51806100cb6000396000f3fe6080604052600436106100555760003560e01c806329ee566c1461005a57806339e359be1461008557806365551fe5146100a7578063964bc33f146100d4578063d96a094a146100f4578063de74e57b14610107575b600080fd5b34801561006657600080fd5b5061006f610127565b60405161007c9190610b87565b60405180910390f35b34801561009157600080fd5b506100a56100a0366004610a0d565b61012d565b005b3480156100b357600080fd5b506100c76100c23660046109f5565b610312565b60405161007c9190610a69565b3480156100e057600080fd5b506100a56100ef3660046109f5565b610327565b6100a56101023660046109f5565b610423565b34801561011357600080fd5b5061006f6101223660046109f5565b610999565b60015481565b6000546040516331a9108f60e11b81526001600160a01b0390911690636352211e9061015d908690600401610b87565b60206040518083038186803b15801561017557600080fd5b505afa158015610189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ad91906109ab565b6001600160a01b0316336001600160a01b0316146101e65760405162461bcd60e51b81526004016101dd90610b19565b60405180910390fd5b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc90610216908790600401610b87565b60206040518083038186803b15801561022e57600080fd5b505afa158015610242573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026691906109ab565b6001600160a01b03161461028c5760405162461bcd60e51b81526004016101dd90610ae2565b600082116102ac5760405162461bcd60e51b81526004016101dd90610b50565b6000838152600360209081526040808320859055600490915290819020805460ff1916831515179055517faeaea83d55e01eaf051d1585eca1a41d3755395129839dfa6678dc5997f3eb0a906103059085908590610b90565b60405180910390a1505050565b60046020526000908152604090205460ff1681565b6000546040516331a9108f60e11b81526001600160a01b0390911690636352211e90610357908490600401610b87565b60206040518083038186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a791906109ab565b6001600160a01b0316336001600160a01b0316146103d75760405162461bcd60e51b81526004016101dd90610b19565b60008181526003602052604080822091909155517f2c525dc2c086b9a2f3b902d229853b5b838fcedc22933c40ed7ebe4890a53a8290610418908390610b87565b60405180910390a150565b60008181526003602090815260408083205460049092529091205460ff168161045e5760405162461bcd60e51b81526004016101dd90610aab565b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc9061048e908790600401610b87565b60206040518083038186803b1580156104a657600080fd5b505afa1580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de91906109ab565b6001600160a01b0316146105045760405162461bcd60e51b81526004016101dd90610ae2565b80801561059257506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061054090339030908790600401610a45565b602060405180830381600087803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059291906109d9565b8061059c57508134145b6105b85760405162461bcd60e51b81526004016101dd90610a74565b60006064600154846105ca9190610bbe565b6105d49190610b9e565b905060008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062557600080fd5b505afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d91906109ab565b600080546040516331a9108f60e11b815292935090916001600160a01b0390911690636352211e90610693908990600401610b87565b60206040518083038186803b1580156106ab57600080fd5b505afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e391906109ab565b6000546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061071890849030908b90600401610a45565b600060405180830381600087803b15801561073257600080fd5b505af1158015610746573d6000803e3d6000fd5b50506000546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061077e90309033908b90600401610a45565b600060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b5050505083156108d0576002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906107ea90309086908a90600401610a45565b602060405180830381600087803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083c91906109d9565b506002546001600160a01b03166323b872dd308361085a878a610bdd565b6040518463ffffffff1660e01b815260040161087893929190610a45565b602060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca91906109d9565b50610948565b6040516001600160a01b0383169084156108fc029085906000818181858888f19350505050158015610906573d6000803e3d6000fd5b506001600160a01b0381166108fc61091e8588610bdd565b6040518115909202916000818181858888f19350505050158015610946573d6000803e3d6000fd5b505b60008681526003602052604080822091909155517f3e32821836f4caf5b64b2c8c6b460049a9797526960d31502f7575b8da39d5ae90610989908890610b87565b60405180910390a1505050505050565b60036020526000908152604090205481565b6000602082840312156109bc578081fd5b81516001600160a01b03811681146109d2578182fd5b9392505050565b6000602082840312156109ea578081fd5b81516109d281610c0a565b600060208284031215610a06578081fd5b5035919050565b600080600060608486031215610a21578182fd5b83359250602084013591506040840135610a3a81610c0a565b809150509250925092565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b60208082526017908201527f4d7573742073656e6420636f7272656374207072696365000000000000000000604082015260600190565b60208082526018908201527f54686973204e4654206973206e6f7420666f722073616c650000000000000000604082015260600190565b60208082526018908201527f54686973204e4654206973206e6f7420617070726f7665640000000000000000604082015260600190565b60208082526017908201527f596f7520646f206e6f74206f776e2074686973204e4654000000000000000000604082015260600190565b6020808252601c908201527f5072696365206d7573742062652067726561746572207468616e203000000000604082015260600190565b90815260200190565b918252602082015260400190565b600082610bb957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610bd857610bd8610bf4565b500290565b600082821015610bef57610bef610bf4565b500390565b634e487b7160e01b600052601160045260246000fd5b8015158114610c1857600080fd5b5056fea2646970667358221220e6f1278d5929b8bfe8dc30acc60ddd077a667a263a96231cd1ee0002ed74bc4b64736f6c63430008000033";

export class Market__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    cut: BigNumberish,
    addr: string,
    stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Market> {
    return super.deploy(cut, addr, stable, overrides || {}) as Promise<Market>;
  }
  getDeployTransaction(
    cut: BigNumberish,
    addr: string,
    stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(cut, addr, stable, overrides || {});
  }
  attach(address: string): Market {
    return super.attach(address) as Market;
  }
  connect(signer: Signer): Market__factory {
    return super.connect(signer) as Market__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketInterface {
    return new utils.Interface(_abi) as MarketInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Market {
    return new Contract(address, _abi, signerOrProvider) as Market;
  }
}
