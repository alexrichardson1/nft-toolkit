/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type { Market, MarketInterface } from "../Market";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "address",
        name: "stable",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Buy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Delist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "SellListing",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "areStable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRoyalties",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "delist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "listings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "royalties",
    outputs: [
      {
        internalType: "uint256",
        name: "stable",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "native",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isStable",
        type: "bool",
      },
    ],
    name: "sellListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e6e380380610e6e83398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b610db1806100bd6000396000f3fe6080604052600436106100705760003560e01c8063964bc33f1161004e578063964bc33f146100e25780639fa6b4a014610102578063d96a094a14610130578063de74e57b1461014357610070565b8063069b78201461007557806339e359be1461008c57806365551fe5146100ac575b600080fd5b34801561008157600080fd5b5061008a610170565b005b34801561009857600080fd5b5061008a6100a7366004610b3a565b61028f565b3480156100b857600080fd5b506100cc6100c7366004610b22565b61046b565b6040516100d99190610baf565b60405180910390f35b3480156100ee57600080fd5b5061008a6100fd366004610b22565b610480565b34801561010e57600080fd5b5061012261011d366004610a9a565b61057c565b6040516100d9929190610bba565b61008a61013e366004610b22565b610595565b34801561014f57600080fd5b5061016361015e366004610b22565b610a88565b6040516100d99190610d0a565b3360009081526004602052604090208054151580610192575060008160010154115b6101b75760405162461bcd60e51b81526004016101ae90610c36565b60405180910390fd5b80541561024957600154815460405163a9059cbb60e01b81526001600160a01b039092169163a9059cbb916101f191339190600401610b96565b602060405180830381600087803b15801561020b57600080fd5b505af115801561021f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102439190610b06565b50600081555b60018101541561028c576001810154604051339180156108fc02916000818181858888f19350505050158015610283573d6000803e3d6000fd5b50600060018201555b50565b6000546040516331a9108f60e11b81526001600160a01b0390911690636352211e906102bf908690600401610d0a565b60206040518083038186803b1580156102d757600080fd5b505afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610abd565b6001600160a01b0316336001600160a01b03161461033f5760405162461bcd60e51b81526004016101ae90610c9c565b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc9061036f908790600401610d0a565b60206040518083038186803b15801561038757600080fd5b505afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf9190610abd565b6001600160a01b0316146103e55760405162461bcd60e51b81526004016101ae90610c65565b600082116104055760405162461bcd60e51b81526004016101ae90610cd3565b6000838152600260209081526040808320859055600390915290819020805460ff1916831515179055517faeaea83d55e01eaf051d1585eca1a41d3755395129839dfa6678dc5997f3eb0a9061045e9085908590610bba565b60405180910390a1505050565b60036020526000908152604090205460ff1681565b6000546040516331a9108f60e11b81526001600160a01b0390911690636352211e906104b0908490600401610d0a565b60206040518083038186803b1580156104c857600080fd5b505afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610abd565b6001600160a01b0316336001600160a01b0316146105305760405162461bcd60e51b81526004016101ae90610c9c565b60008181526002602052604080822091909155517f2c525dc2c086b9a2f3b902d229853b5b838fcedc22933c40ed7ebe4890a53a8290610571908390610d0a565b60405180910390a150565b6004602052600090815260409020805460019091015482565b60008181526002602090815260408083205460039092529091205460ff16816105d05760405162461bcd60e51b81526004016101ae90610bff565b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc90610600908790600401610d0a565b60206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190610abd565b6001600160a01b0316146106765760405162461bcd60e51b81526004016101ae90610c65565b80801561070457506001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106b290339030908790600401610b72565b602060405180830381600087803b1580156106cc57600080fd5b505af11580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190610b06565b8061070e57508134145b61072a5760405162461bcd60e51b81526004016101ae90610bc8565b6000805460405163152a902d60e11b815282916001600160a01b031690632a55205a9061075d9084908890600401610bba565b604080518083038186803b15801561077457600080fd5b505afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190610ad9565b600080546040516331a9108f60e11b8152939550919350916001600160a01b0390911690636352211e906107e4908990600401610d0a565b60206040518083038186803b1580156107fc57600080fd5b505afa158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190610abd565b6000546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061086990849030908b90600401610b72565b600060405180830381600087803b15801561088357600080fd5b505af1158015610897573d6000803e3d6000fd5b50506000546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd91506108cf90309033908b90600401610b72565b600060405180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050506000828661090f9190610d2b565b905084156109ce576001600160a01b0384166000908152600460205260408120805485929061093f908490610d13565b909155505060015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906109769085908590600401610b96565b602060405180830381600087803b15801561099057600080fd5b505af11580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c89190610b06565b50610a36565b6001600160a01b038416600090815260046020526040812060010180548592906109f9908490610d13565b90915550506040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610a34573d6000803e3d6000fd5b505b60008781526002602052604080822091909155517f3e32821836f4caf5b64b2c8c6b460049a9797526960d31502f7575b8da39d5ae90610a77908990610d0a565b60405180910390a150505050505050565b60026020526000908152604090205481565b600060208284031215610aab578081fd5b8135610ab681610d58565b9392505050565b600060208284031215610ace578081fd5b8151610ab681610d58565b60008060408385031215610aeb578081fd5b8251610af681610d58565b6020939093015192949293505050565b600060208284031215610b17578081fd5b8151610ab681610d6d565b600060208284031215610b33578081fd5b5035919050565b600080600060608486031215610b4e578081fd5b83359250602084013591506040840135610b6781610d6d565b809150509250925092565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b918252602082015260400190565b60208082526017908201527f4d7573742073656e6420636f7272656374207072696365000000000000000000604082015260600190565b60208082526018908201527f54686973204e4654206973206e6f7420666f722073616c650000000000000000604082015260600190565b6020808252601590820152744e6f20726f79616c7469657320746f20636c61696d60581b604082015260600190565b60208082526018908201527f54686973204e4654206973206e6f7420617070726f7665640000000000000000604082015260600190565b60208082526017908201527f596f7520646f206e6f74206f776e2074686973204e4654000000000000000000604082015260600190565b6020808252601c908201527f5072696365206d7573742062652067726561746572207468616e203000000000604082015260600190565b90815260200190565b60008219821115610d2657610d26610d42565b500190565b600082821015610d3d57610d3d610d42565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461028c57600080fd5b801515811461028c57600080fdfea264697066735822122077688fd990a8d5103ec5adbc624407daece9a469313d9e456aec80ea409632c964736f6c63430008000033";

export class Market__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    addr: string,
    stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Market> {
    return super.deploy(addr, stable, overrides || {}) as Promise<Market>;
  }
  getDeployTransaction(
    addr: string,
    stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(addr, stable, overrides || {});
  }
  attach(address: string): Market {
    return super.attach(address) as Market;
  }
  connect(signer: Signer): Market__factory {
    return super.connect(signer) as Market__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketInterface {
    return new utils.Interface(_abi) as MarketInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Market {
    return new Contract(address, _abi, signerOrProvider) as Market;
  }
}
