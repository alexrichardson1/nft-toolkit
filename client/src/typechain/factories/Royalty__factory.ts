/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
  Signer,
  utils,
} from "ethers";
import type { Royalty, RoyaltyInterface } from "../Royalty";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cut",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "delist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "listings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "royalty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "sellListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108fd3803806108fd83398101604081905261002f91610057565b600080546001600160a01b0319166001600160a01b0392909216919091179055600155610092565b60008060408385031215610069578182fd5b825160208401519092506001600160a01b0381168114610087578182fd5b809150509250929050565b61085c806100a16000396000f3fe60806040526004361061004a5760003560e01c806329ee566c1461004f578063964bc33f1461007a578063a34936541461009c578063d96a094a146100bc578063de74e57b146100cf575b600080fd5b34801561005b57600080fd5b506100646100ef565b60405161007191906107b1565b60405180910390f35b34801561008657600080fd5b5061009a6100953660046106af565b6100f5565b005b3480156100a857600080fd5b5061009a6100b73660046106c7565b6101bf565b61009a6100ca3660046106af565b610327565b3480156100db57600080fd5b506100646100ea3660046106af565b61066f565b60015481565b6000546040516331a9108f60e11b81526001600160a01b0390911690636352211e906101259084906004016107b1565b60206040518083038186803b15801561013d57600080fd5b505afa158015610151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101759190610681565b6001600160a01b0316336001600160a01b0316146101ae5760405162461bcd60e51b81526004016101a59061077a565b60405180910390fd5b600090815260026020526040812055565b6000546040516331a9108f60e11b81526001600160a01b0390911690636352211e906101ef9085906004016107b1565b60206040518083038186803b15801561020757600080fd5b505afa15801561021b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023f9190610681565b6001600160a01b0316336001600160a01b03161461026f5760405162461bcd60e51b81526004016101a59061077a565b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc9061029f9086906004016107b1565b60206040518083038186803b1580156102b757600080fd5b505afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610681565b6001600160a01b0316146103155760405162461bcd60e51b81526004016101a590610743565b60009182526002602052604090912055565b60008181526002602052604090205434146103545760405162461bcd60e51b81526004016101a59061070c565b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc906103849085906004016107b1565b60206040518083038186803b15801561039c57600080fd5b505afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d49190610681565b6001600160a01b0316146103fa5760405162461bcd60e51b81526004016101a590610743565b600060646001543461040c91906107da565b61041691906107ba565b905060008060009054906101000a90046001600160a01b03166001600160a01b03166343bc16126040518163ffffffff1660e01b815260040160206040518083038186803b15801561046757600080fd5b505afa15801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f9190610681565b600080546040516331a9108f60e11b815292935090916001600160a01b0390911690636352211e906104d59087906004016107b1565b60206040518083038186803b1580156104ed57600080fd5b505afa158015610501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105259190610681565b6000546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061055a908490309089906004016106e8565b600060405180830381600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b50506040516001600160a01b038516925085156108fc02915085906000818181858888f193505050501580156105c2573d6000803e3d6000fd5b506001600160a01b0381166108fc6105da85346107f9565b6040518115909202916000818181858888f19350505050158015610602573d6000803e3d6000fd5b506000546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610637903090339089906004016106e8565b600060405180830381600087803b15801561065157600080fd5b505af1158015610665573d6000803e3d6000fd5b5050505050505050565b60026020526000908152604090205481565b600060208284031215610692578081fd5b81516001600160a01b03811681146106a8578182fd5b9392505050565b6000602082840312156106c0578081fd5b5035919050565b600080604083850312156106d9578081fd5b50508035926020909101359150565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526017908201527f4d7573742073656e6420636f7272656374207072696365000000000000000000604082015260600190565b60208082526018908201527f54686973204e4654206973206e6f7420617070726f7665640000000000000000604082015260600190565b60208082526017908201527f596f7520646f206e6f74206f776e2074686973204e4654000000000000000000604082015260600190565b90815260200190565b6000826107d557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156107f4576107f4610810565b500290565b60008282101561080b5761080b610810565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122015fc878612a837d1b17bcd745d06084d3322e2db0446a369d615d1ba6cbf9bb664736f6c63430008000033";

export class Royalty__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    cut: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Royalty> {
    return super.deploy(cut, addr, overrides || {}) as Promise<Royalty>;
  }
  getDeployTransaction(
    cut: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(cut, addr, overrides || {});
  }
  attach(address: string): Royalty {
    return super.attach(address) as Royalty;
  }
  connect(signer: Signer): Royalty__factory {
    return super.connect(signer) as Royalty__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltyInterface {
    return new utils.Interface(_abi) as RoyaltyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Royalty {
    return new Contract(address, _abi, signerOrProvider) as Royalty;
  }
}
