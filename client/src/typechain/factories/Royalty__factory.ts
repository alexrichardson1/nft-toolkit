/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
  Signer,
  utils,
} from "ethers";
import type { Royalty, RoyaltyInterface } from "../Royalty";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cut",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "listings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "sellListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107eb3803806107eb83398101604081905261002f91610057565b600080546001600160a01b0319166001600160a01b0392909216919091179055600155610092565b60008060408385031215610069578182fd5b825160208401519092506001600160a01b0381168114610087578182fd5b809150509250929050565b61074a806100a16000396000f3fe6080604052600436106100345760003560e01c8063a349365414610039578063d96a094a1461005b578063de74e57b1461006e575b600080fd5b34801561004557600080fd5b506100596100543660046105b5565b6100a4565b005b61005961006936600461059d565b610215565b34801561007a57600080fd5b5061008e61008936600461059d565b61055d565b60405161009b919061069f565b60405180910390f35b6000546040516331a9108f60e11b81526001600160a01b0390911690636352211e906100d490859060040161069f565b60206040518083038186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610124919061056f565b6001600160a01b0316336001600160a01b03161461015d5760405162461bcd60e51b815260040161015490610668565b60405180910390fd5b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc9061018d90869060040161069f565b60206040518083038186803b1580156101a557600080fd5b505afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd919061056f565b6001600160a01b0316146102035760405162461bcd60e51b815260040161015490610631565b60009182526002602052604090912055565b60008181526002602052604090205434146102425760405162461bcd60e51b8152600401610154906105fa565b60005460405163020604bf60e21b815230916001600160a01b03169063081812fc9061027290859060040161069f565b60206040518083038186803b15801561028a57600080fd5b505afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c2919061056f565b6001600160a01b0316146102e85760405162461bcd60e51b815260040161015490610631565b60006064600154346102fa91906106c8565b61030491906106a8565b905060008060009054906101000a90046001600160a01b03166001600160a01b03166343bc16126040518163ffffffff1660e01b815260040160206040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d919061056f565b600080546040516331a9108f60e11b815292935090916001600160a01b0390911690636352211e906103c390879060040161069f565b60206040518083038186803b1580156103db57600080fd5b505afa1580156103ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610413919061056f565b6000546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90610448908490309089906004016105d6565b600060405180830381600087803b15801561046257600080fd5b505af1158015610476573d6000803e3d6000fd5b50506040516001600160a01b038516925085156108fc02915085906000818181858888f193505050501580156104b0573d6000803e3d6000fd5b506001600160a01b0381166108fc6104c885346106e7565b6040518115909202916000818181858888f193505050501580156104f0573d6000803e3d6000fd5b506000546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610525903090339089906004016105d6565b600060405180830381600087803b15801561053f57600080fd5b505af1158015610553573d6000803e3d6000fd5b5050505050505050565b60026020526000908152604090205481565b600060208284031215610580578081fd5b81516001600160a01b0381168114610596578182fd5b9392505050565b6000602082840312156105ae578081fd5b5035919050565b600080604083850312156105c7578081fd5b50508035926020909101359150565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526017908201527f4d7573742073656e6420636f7272656374207072696365000000000000000000604082015260600190565b60208082526018908201527f54686973204e4654206973206e6f7420617070726f7665640000000000000000604082015260600190565b60208082526017908201527f596f7520646f206e6f74206f776e2074686973204e4654000000000000000000604082015260600190565b90815260200190565b6000826106c357634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156106e2576106e26106fe565b500290565b6000828210156106f9576106f96106fe565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204726d58666d774c177ec876c9a3d186881997d18cebf33194cdbf26e40be4c2164736f6c63430008000033";

export class Royalty__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    cut: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Royalty> {
    return super.deploy(cut, addr, overrides || {}) as Promise<Royalty>;
  }
  getDeployTransaction(
    cut: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(cut, addr, overrides || {});
  }
  attach(address: string): Royalty {
    return super.attach(address) as Royalty;
  }
  connect(signer: Signer): Royalty__factory {
    return super.connect(signer) as Royalty__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltyInterface {
    return new utils.Interface(_abi) as RoyaltyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Royalty {
    return new Contract(address, _abi, signerOrProvider) as Royalty;
  }
}
